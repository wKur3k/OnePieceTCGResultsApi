// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnePieceTCGResultsApi.Entities;

#nullable disable

namespace OnePieceTCGResultsApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240215202811_InitialEntities")]
    partial class InitialEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.1.24081.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ColorLeader", b =>
                {
                    b.Property<int>("ColorsColorId")
                        .HasColumnType("integer");

                    b.Property<int>("LeadersId")
                        .HasColumnType("integer");

                    b.HasKey("ColorsColorId", "LeadersId");

                    b.HasIndex("LeadersId");

                    b.ToTable("ColorLeader");
                });

            modelBuilder.Entity("OnePieceTCGResultsApi.Entities.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ColorId");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            ColorId = 0,
                            Name = "RED"
                        },
                        new
                        {
                            ColorId = 1,
                            Name = "GREEN"
                        },
                        new
                        {
                            ColorId = 2,
                            Name = "BLUE"
                        },
                        new
                        {
                            ColorId = 3,
                            Name = "PURPLE"
                        },
                        new
                        {
                            ColorId = 4,
                            Name = "BLACK"
                        },
                        new
                        {
                            ColorId = 5,
                            Name = "YELLOW"
                        },
                        new
                        {
                            ColorId = 6,
                            Name = "REDGREEN"
                        },
                        new
                        {
                            ColorId = 7,
                            Name = "REDBLUE"
                        },
                        new
                        {
                            ColorId = 8,
                            Name = "REDPURPLE"
                        },
                        new
                        {
                            ColorId = 9,
                            Name = "REDBLACK"
                        },
                        new
                        {
                            ColorId = 10,
                            Name = "REDYELLOW"
                        },
                        new
                        {
                            ColorId = 11,
                            Name = "GREENBLUE"
                        },
                        new
                        {
                            ColorId = 12,
                            Name = "GREENPURPLE"
                        },
                        new
                        {
                            ColorId = 13,
                            Name = "GREENBLACK"
                        },
                        new
                        {
                            ColorId = 14,
                            Name = "GREENYELLOW"
                        },
                        new
                        {
                            ColorId = 15,
                            Name = "BLUEPURPLE"
                        },
                        new
                        {
                            ColorId = 16,
                            Name = "BLUEBLACK"
                        },
                        new
                        {
                            ColorId = 17,
                            Name = "BLUEYELLOW"
                        },
                        new
                        {
                            ColorId = 18,
                            Name = "PURPLEBLACK"
                        },
                        new
                        {
                            ColorId = 19,
                            Name = "PURPLEYELLOW"
                        },
                        new
                        {
                            ColorId = 20,
                            Name = "BLACKYELLOW"
                        });
                });

            modelBuilder.Entity("OnePieceTCGResultsApi.Entities.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("OnePieceTCGResultsApi.Entities.Leader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeckId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeckId")
                        .IsUnique();

                    b.ToTable("Leaders");
                });

            modelBuilder.Entity("OnePieceTCGResultsApi.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeckId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("OnePieceTCGResultsApi.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 0,
                            Name = "ADMIN"
                        },
                        new
                        {
                            RoleId = 1,
                            Name = "USER"
                        });
                });

            modelBuilder.Entity("OnePieceTCGResultsApi.Entities.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeckId")
                        .HasColumnType("integer");

                    b.Property<bool>("Result")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("OnePieceTCGResultsApi.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesRoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("RolesRoleId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("ColorLeader", b =>
                {
                    b.HasOne("OnePieceTCGResultsApi.Entities.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorsColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnePieceTCGResultsApi.Entities.Leader", null)
                        .WithMany()
                        .HasForeignKey("LeadersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnePieceTCGResultsApi.Entities.Leader", b =>
                {
                    b.HasOne("OnePieceTCGResultsApi.Entities.Deck", "Deck")
                        .WithOne("Leader")
                        .HasForeignKey("OnePieceTCGResultsApi.Entities.Leader", "DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("OnePieceTCGResultsApi.Entities.Note", b =>
                {
                    b.HasOne("OnePieceTCGResultsApi.Entities.Deck", "Deck")
                        .WithMany("Notes")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnePieceTCGResultsApi.Entities.User", null)
                        .WithMany("Notes")
                        .HasForeignKey("UserId");

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("OnePieceTCGResultsApi.Entities.Score", b =>
                {
                    b.HasOne("OnePieceTCGResultsApi.Entities.Deck", "Deck")
                        .WithMany("Scores")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("OnePieceTCGResultsApi.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnePieceTCGResultsApi.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnePieceTCGResultsApi.Entities.Deck", b =>
                {
                    b.Navigation("Leader")
                        .IsRequired();

                    b.Navigation("Notes");

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("OnePieceTCGResultsApi.Entities.User", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
